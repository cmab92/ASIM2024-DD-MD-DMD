close all; clear all; clc; 
%%
rng(1);
%% gen. data
n_samples_x = 21;
k = 401; % thermal conductivity
c = 385; % specific heat capacity
r = 8.96; % mass density    
f = 1/2;            % fummelkonstante space-time-discretization
data = analytical_solution(n_samples_x, k, r, c, f);
%% num of train-samples??
% sDMD is reasonable for very few samples. Otherwise basic DMD seems to
% converge faster and is less complicated
for train_size = 2:size(data, 2)
    %% train-test split:
    train_data = data(:, 1:train_size);
    test_data = data(:, train_size+1:end);
    X1 = train_data(:, 1:end-1);
    X2 = train_data(:, 2:end);
    disp(['spatial samples: ', int2str(size(data, 1))]);
    disp(['train-data samples: ', int2str(size(train_data, 2))]);
    disp(['test-data samples: ', int2str(size(test_data, 2))]);
    disp(" ")
    %% sDMD
    A_sdmd = vanilla_fd_DMD(X1, X2);
    % more degrees of freedom (ho_fd_DMD) allow for better convergence, yet
    % this deteriorates convergence for very few samples
    % A_sdmd = ho_fd_DMD(X1, X2);
    %% basic DMD
    [U, S, V] = svd(X1);
    r = min(size(X1));
    A_dmd = X2*V(:, 1:r)*pinv(S(1:r, 1:r))*U(:, 1:r)';
    clim([minval, maxval])
    
%%figure()
fd_system = md_fd_system(n_samples_x, k, r, c, f);
maxval = max(max([fd_system, A_sdmd]));
minval = min(min([fd_system, A_sdmd]));
subplot(1,5,1)
imagesc(fd_system)
clim([minval, maxval])
title("fin.-diff. system")
subplot(1,5,2)
imagesc(A_sdmd)
clim([minval, maxval])
title("sDMD system")
subplot(1,5,3)
imagesc(A_sdmd-fd_system)
clim([minval, maxval])
title("difference")
subplot(1,5,4)
imagesc(A_dmd)
clim([minval, maxval])
title("sDMD system")
subplot(1,5,5)
imagesc(A_dmd-fd_system)
clim([minval, maxval])
title("difference")
disp(" ")
disp(['"error" (or rather difference) between modelled system and "learned" sDMD system: ', num2str(norm((fd_system-A_sdmd)./(fd_system + 1e-16)))]);
disp(['"error" (or rather difference) between modelled system and "learned" DMD system: ', num2str(norm((fd_system-A_dmd)./(fd_system + 1e-16)))]);
%%
function Z = pred_error_visu(true, pred)
    Z = log(abs((true-pred)./(true+1e-16)));
end
function system = md_fd_system(N, k, rho, c, f)
    L = 1; % length
    dx = L/(N-1); % spatial sampling
    a = k/(rho*c);
    dt = f*(dx^2/(2*a)); % => dt < dx^2/(2*a) % same (!) as in analytical_solution.m
    D = full(gallery('tridiag',N,1,-2,1));
    D(1,2) = 2;
    D(N,N-1) = 2;    
    system = dt*(a/dx * D)/dx + eye(N);
end